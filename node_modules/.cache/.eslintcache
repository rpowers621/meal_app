[{"/home/Jilal99/sign_auth/src/index.js":"1","/home/Jilal99/sign_auth/src/App.js":"2","/home/Jilal99/sign_auth/src/reportWebVitals.js":"3","/home/Jilal99/sign_auth/src/Login.js":"4","/home/Jilal99/sign_auth/src/Mealboard.js":"5"},{"size":500,"mtime":1636762902620,"results":"6","hashOfConfig":"7"},{"size":544,"mtime":1636764098257,"results":"8","hashOfConfig":"7"},{"size":362,"mtime":1636762902620,"results":"9","hashOfConfig":"7"},{"size":1918,"mtime":1636764364563,"results":"10","hashOfConfig":"7"},{"size":195,"mtime":1636763517858,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"p02a18",{"filePath":"14","messages":"15","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"16"},{"filePath":"17","messages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"19","messages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21"},{"filePath":"22","messages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/Jilal99/sign_auth/src/index.js",[],"/home/Jilal99/sign_auth/src/App.js",["24"],"import React from 'react';\nimport Login from './Login';\nimport Mealboard from './Mealboard';\nimport { BrowserRouter as Router, Route, Link, NavLink, Switch } from 'react-router-dom';\n\n\n\nfunction App() {\n  \n  return (\n    <Router>\n    <Login />\n    <div className=\"App\">\n      <h2>Plan your Mealboard!</h2>\n\n      <NavLink exact activeClassName=\"Active\" to=\"/mealboard\">Mealboard</NavLink>\n\n      <hr />\n\n      <Switch>\n        <Route path =\"/mealboard\" component={Mealboard} />\n      </Switch>\n    </div>\n  </Router>\n  );\n}\n\nexport default App;","/home/Jilal99/sign_auth/src/reportWebVitals.js",[],"/home/Jilal99/sign_auth/src/Login.js",["25"],"import React, { useState } from 'react';\nimport { GoogleLogin, GoogleLogout } from 'react-google-login';\n\nconst clientId = process.env.REACT_APP_clientId;\n\nfunction Login() {\n\n    const [username, setusername] = useState();\n    const [useremail, setuseremail] = useState();\n    const [userimage, setuserimage] = useState();\n\n    const [showloginButton, setShowloginButton] = useState(true);\n    const [showlogoutButton, setShowlogoutButton] = useState(false);\n    const onLoginSuccess = (res) => {\n        console.log('Login Success:', res.profileObj);\n        setShowloginButton(false);\n        setShowlogoutButton(true);\n        setusername(res.profileObj.name);\n        setuseremail(res.profileObj.email);\n        setuserimage(res.profileObj.imageUrl);\n    };\n\n    const onLoginFailure = (res) => {\n        console.log('Login Failed:', res);\n    };\n\n    const onSignoutSuccess = () => {\n        alert(\"You have been logged out successfully\");\n        console.clear();\n        setShowloginButton(true);\n        setShowlogoutButton(false);\n    };\n\n    return (\n        <div>\n            <div className=\"User Info\">\n                <img src={userimage} />\n                <p>{username}</p>\n                <p>{useremail}</p>\n            </div>\n            { showloginButton ?\n                <GoogleLogin\n                    clientId={clientId}\n                    buttonText=\"Sign In\"\n                    onSuccess={onLoginSuccess}\n                    onFailure={onLoginFailure}\n                    cookiePolicy={'single_host_origin'}\n                    isSignedIn={true}\n                /> : null}\n\n            { showlogoutButton ?\n                <GoogleLogout\n                    clientId={clientId}\n                    buttonText=\"Sign Out\"\n                    onLogoutSuccess={onSignoutSuccess}\n                >\n                </GoogleLogout> : null\n            }\n        </div>\n    );\n}\nexport default Login;","/home/Jilal99/sign_auth/src/Mealboard.js",[],{"ruleId":"26","severity":1,"message":"27","line":4,"column":42,"nodeType":"28","messageId":"29","endLine":4,"endColumn":46},{"ruleId":"30","severity":1,"message":"31","line":37,"column":17,"nodeType":"32","endLine":37,"endColumn":40},"no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement"]